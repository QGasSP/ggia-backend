"""add country fk

Revision ID: 6bb14abc2df0
Revises: d2649afff654
Create Date: 2022-03-07 22:29:15.793913

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import MetaData
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
from ggia_app import fetch_data

revision = '6bb14abc2df0'
down_revision = 'd2649afff654'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    land_use_changes = op.create_table('land_use_changes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('land_conversion', sa.String(), nullable=True),
    sa.Column('factor_name', sa.String(), nullable=True),
    sa.Column('factor_value', sa.Float(), nullable=True),
    sa.Column('country_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('land_use_change_default_dataset')
    op.alter_column('countries', 'dataset_name',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'default'::character varying"))
    op.alter_column('yearly_growth_factors', 'id', existing_type=sa.Integer(), nullable=False)
    op.add_column('yearly_growth_factors', sa.Column('country_id', sa.Integer(), nullable=True))
    op.create_foreign_key("yearly_growth_factors_countries_fk", 'yearly_growth_factors', 'countries', ['country_id'], ['id'])
    op.drop_column('yearly_growth_factors', 'country')
    # ### end Alembic commands ###
    meta = MetaData(bind=op.get_bind())
    meta.reflect(only=('yearly_growth_factors',))
    countries = fetch_data.fetch_countries_from_db(op.get_bind())
    yearly_growth_factors = sa.Table('yearly_growth_factors', meta)

    land_use_changes_data = fetch_data.fetch_land_use_change_factors("CSVfiles/land-use-change-default-dataset.csv",
                                                                     countries)
    factors = fetch_data.fetch_yearly_growth_factors("CSVfiles/yearly_growth_factor_template.csv", countries)

    op.bulk_insert(land_use_changes, land_use_changes_data)
    op.bulk_insert(yearly_growth_factors, factors)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('yearly_growth_factors', sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint("yearly_growth_factors_countries_fk", 'yearly_growth_factors', type_='foreignkey')
    op.drop_column('yearly_growth_factors', 'country_id')
    op.alter_column('countries', 'dataset_name',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'default'::character varying"))
    op.create_table('land_use_change_default_dataset',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('land_conversion', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('factor_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('factor_value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='land_use_change_default_dataset_pkey')
    )
    op.drop_table('land_use_changes')
    # ### end Alembic commands ###
